{"version":3,"sources":["BarChart.jsx","RadialChart.jsx","LineChartV2.jsx","data/data.js","App.js","serviceWorker.js","index.js"],"names":["styled","OrdinalFrame","prop","stickTo","Chart","RadialChart","data","xAxis","yAxis","title","frameProps","size","window","innerHeight","innerWidth","margin","type","projection","oAccessor","rAccessor","rScaleType","scaleSqrt","pieceClass","d","toLowerCase","oLabel","label","orient","padding","div","getRandomInt","max","Math","floor","random","GlobalStyle","createGlobalStyle","AppWrapper","ScrollamaWrapper","StepWrapper","App","useState","book","setBook","useEffect","scrollTo","top","behavior","onStepEnter","offset","map","key","spells","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d224d910.chunk.js","sourcesContent":["import React from \"react\";\nimport OrdinalFrame from \"semiotic/lib/OrdinalFrame\";\nimport styled from \"styled-components\";\n\nconst Chart = styled(OrdinalFrame)`\n  position: sticky;\n  top: ${(prop) => (prop.stickTo == \"top\" ? 0 : null)};\n  bottom: ${(prop) => (prop.stickTo == \"bottom\" ? 0 : null)};\n`;\n\nconst BarChart = ({ data, xAxis, yAxis, title, stickTo }) => {\n  const frameProps = {\n    /* --- Data --- */\n    data,\n\n    /* --- Size --- */\n    size: [350, 350],\n    margin: 100,\n\n    /* --- Layout --- */\n    type: \"bar\",\n\n    /* --- Process --- */\n    oAccessor: xAxis,\n    rAccessor: yAxis,\n\n    /* --- Customize --- */\n    style: { fill: \"#2d4c80\", stroke: \"white\" },\n    title,\n\n    /* --- Annotate --- */\n    oLabel: (d) => (\n      <text fontSize={14} transform=\"rotate(45)\">\n        {d}\n      </text>\n    ),\n  };\n\n  return <Chart {...frameProps} stickTo={stickTo} />;\n};\n\nexport default BarChart;\n","import React from \"react\";\nimport OrdinalFrame from \"semiotic/lib/OrdinalFrame\";\nimport styled from \"styled-components\";\nimport { scaleSqrt } from \"d3-scale\";\nimport \"./RadialChart.css\";\n\nconst Chart = styled(OrdinalFrame)`\n  position: sticky;\n  top: 0;\n`;\n\nconst RadialChart = ({ data, xAxis, yAxis, title }) => {\n  const frameProps = {\n    /* --- Data --- */\n    data,\n\n    /* --- Size --- */\n    size: [window.innerHeight - 100, window.innerWidth - 100],\n    margin: 100,\n\n    /* --- Layout --- */\n    type: \"bar\",\n    projection: \"radial\",\n\n    /* --- Process --- */\n    oAccessor: xAxis,\n    rAccessor: yAxis,\n    rScaleType: scaleSqrt(),\n\n    /* --- Customize --- */\n    pieceClass: (d) => d[\"type\"].toLowerCase(),\n\n    title,\n\n    /* --- Annotate --- */\n    oLabel: { label: true, orient: \"stem\", padding: 5 },\n  };\n\n  return <Chart {...frameProps} />;\n};\n\nexport default RadialChart;\n","import React from \"react\";\nimport { line } from \"d3-shape\";\nimport { useSpring, useTransition, animated } from \"react-spring\";\nimport { scaleLinear } from \"d3-scale\";\nimport useChartDimensions from \"./hooks/useChartDimensions.js\";\nimport styled from \"styled-components\";\nimport Axes from \"./Axes\";\nimport _ from \"lodash\";\n\nconst ChartContainer = styled.div`\n  position: sticky;\n  top: ${(prop) => (prop.stickTo == \"top\" ? 0 : null)};\n  bottom: ${(prop) => (prop.stickTo == \"bottom\" ? 0 : null)};\n  width: 350px;\n  height: 350px;\n`;\n\nconst LineChartV2 = ({ data, x, y, stickTo }) => {\n  const chartSettings = {\n    marginTop: 20,\n    marginBottom: 50,\n    marginLeft: 50,\n    marginRight: 50,\n  };\n\n  const [ref, dms] = useChartDimensions(chartSettings);\n\n  const xScale = scaleLinear().domain([1, 7]).range([0, dms.boundedWidth]);\n  const yScale = scaleLinear().domain([0, 900]).range([dms.boundedHeight, 0]);\n\n  const items = data.coordinates;\n  const itemKeys = _.map(items, (item) => item.key);\n\n  const transitions = useTransition(items, (item) => item.key, {\n    from: { strokeDashoffset: dms.width },\n    enter: { strokeDashoffset: 0 },\n    leave: { strokeDashoffset: dms.width },\n  });\n\n  return (\n    <>\n      <ChartContainer ref={ref} stickTo={stickTo}>\n        <svg width={dms.width} height={dms.height}>\n          <g\n            transform={`translate(${[dms.marginLeft, dms.marginTop].join(\n              \",\"\n            )})`}\n          >\n            {/* Axis layer */}\n            <Axes\n              domainX={[1, 7]}\n              rangeX={[0, dms.boundedWidth]}\n              domainY={[0, 900]}\n              rangeY={[dms.boundedHeight, 0]}\n              numTicksX={7}\n              numTicksY={10}\n              labelX={\"book #\"}\n              labelY={\"pages\"}\n              dms={dms}\n            />\n            {/* Plot layer */}\n            {items.length === 1 && (\n              <circle\n                cx={xScale(items[0][x])}\n                cy={yScale(items[0][y])}\n                r=\"3\"\n                style={{\n                  fill: \"steelblue\",\n                }}\n              />\n            )}\n            <g>\n              {transitions.map(({ item, props }) => {\n                return (\n                  <animated.svg\n                    key={item.key}\n                    strokeDasharray={dms.width}\n                    strokeDashoffset={props.strokeDashoffset}\n                  >\n                    <path\n                      style={{\n                        fill: \"none\",\n                        stroke: \"steelblue\",\n                        strokeWidth: 1.5,\n                      }}\n                      d={[\n                        \"M\",\n                        item.key > 0\n                          ? xScale(items[item.key - 1][x])\n                          : xScale(item[x]),\n                        item.key > 0\n                          ? yScale(items[item.key - 1][y])\n                          : yScale(item[y]),\n                        \"L\",\n                        xScale(item[x]),\n                        yScale(item[y]),\n                      ].join(\" \")}\n                    />\n                  </animated.svg>\n                );\n              })}\n            </g>\n          </g>\n        </svg>\n      </ChartContainer>\n    </>\n  );\n};\n\nexport default LineChartV2;\n","const getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nconst spells = {\n  1: [\n    { spell: \"Avada Kedavra\", mentions: getRandomInt(100) },\n    { spell: \"Expeliarmus\", mentions: getRandomInt(100) },\n    { spell: \"Levicorpus\", mentions: getRandomInt(100) },\n    { spell: \"Reducto\", mentions: getRandomInt(100) },\n    { spell: \"Lumos\", mentions: getRandomInt(100) },\n  ],\n  2: [\n    { spell: \"Avada Kedavra\", mentions: getRandomInt(100) },\n    { spell: \"Expeliarmus\", mentions: getRandomInt(100) },\n    { spell: \"Levicorpus\", mentions: getRandomInt(100) },\n    { spell: \"Reducto\", mentions: getRandomInt(100) },\n    { spell: \"Lumos\", mentions: getRandomInt(100) },\n  ],\n  3: [\n    { spell: \"Avada Kedavra\", mentions: getRandomInt(100) },\n    { spell: \"Expeliarmus\", mentions: getRandomInt(100) },\n    { spell: \"Levicorpus\", mentions: getRandomInt(100) },\n    { spell: \"Reducto\", mentions: getRandomInt(100) },\n    { spell: \"Lumos\", mentions: getRandomInt(100) },\n  ],\n  4: [\n    { spell: \"Avada Kedavra\", mentions: getRandomInt(100) },\n    { spell: \"Expeliarmus\", mentions: getRandomInt(100) },\n    { spell: \"Levicorpus\", mentions: getRandomInt(100) },\n    { spell: \"Reducto\", mentions: getRandomInt(100) },\n    { spell: \"Lumos\", mentions: getRandomInt(100) },\n  ],\n  5: [\n    { spell: \"Avada Kedavra\", mentions: getRandomInt(100) },\n    { spell: \"Expeliarmus\", mentions: getRandomInt(100) },\n    { spell: \"Levicorpus\", mentions: getRandomInt(100) },\n    { spell: \"Reducto\", mentions: getRandomInt(100) },\n    { spell: \"Lumos\", mentions: getRandomInt(100) },\n  ],\n  6: [\n    { spell: \"Avada Kedavra\", mentions: getRandomInt(100) },\n    { spell: \"Expeliarmus\", mentions: getRandomInt(100) },\n    { spell: \"Levicorpus\", mentions: getRandomInt(100) },\n    { spell: \"Reducto\", mentions: getRandomInt(100) },\n    { spell: \"Lumos\", mentions: getRandomInt(100) },\n  ],\n  7: [\n    { spell: \"Avada Kedavra\", mentions: getRandomInt(100) },\n    { spell: \"Expeliarmus\", mentions: getRandomInt(100) },\n    { spell: \"Levicorpus\", mentions: getRandomInt(100) },\n    { spell: \"Reducto\", mentions: getRandomInt(100) },\n    { spell: \"Lumos\", mentions: getRandomInt(100) },\n  ],\n};\n\nconst characterLines = {\n  1: [\n    { character: \"Harry Potter\", lines: getRandomInt(10000) },\n    { character: \"Ron\", lines: getRandomInt(10000) },\n    { character: \"Hermione\", lines: getRandomInt(10000) },\n  ],\n  2: [\n    { character: \"Harry Potter\", lines: getRandomInt(10000) },\n    { character: \"Ron\", lines: getRandomInt(10000) },\n    { character: \"Hermione\", lines: getRandomInt(10000) },\n  ],\n  3: [\n    { character: \"Harry Potter\", lines: getRandomInt(10000) },\n    { character: \"Ron\", lines: getRandomInt(10000) },\n    { character: \"Hermione\", lines: getRandomInt(10000) },\n  ],\n  4: [\n    { character: \"Harry Potter\", lines: getRandomInt(10000) },\n    { character: \"Ron\", lines: getRandomInt(10000) },\n    { character: \"Hermione\", lines: getRandomInt(10000) },\n  ],\n  5: [\n    { character: \"Harry Potter\", lines: getRandomInt(10000) },\n    { character: \"Ron\", lines: getRandomInt(10000) },\n    { character: \"Hermione\", lines: getRandomInt(10000) },\n  ],\n  6: [\n    { character: \"Harry Potter\", lines: getRandomInt(10000) },\n    { character: \"Ron\", lines: getRandomInt(10000) },\n    { character: \"Hermione\", lines: getRandomInt(10000) },\n  ],\n  7: [\n    { character: \"Harry Potter\", lines: getRandomInt(10000) },\n    { character: \"Ron\", lines: getRandomInt(10000) },\n    { character: \"Hermione\", lines: getRandomInt(10000) },\n  ],\n};\n\nconst bookPages = {\n  title: \"Page Counts\",\n  coordinates: [\n    { key: 0, bookNum: 1, pages: 309 },\n    { key: 1, bookNum: 2, pages: 341 },\n    { key: 2, bookNum: 3, pages: 435 },\n    { key: 3, bookNum: 4, pages: 734 },\n    { key: 4, bookNum: 5, pages: 870 },\n    { key: 5, bookNum: 6, pages: 652 },\n    { key: 6, bookNum: 7, pages: 759 },\n  ],\n};\n\nconst topWords = {\n  1: [\"dursley\", \"wand\", \"spell\", \"wizard\", \"butterbeer\"],\n  2: [\"bludger\", \"memory\", \"pensieve\", \"quill\", \"elf\"],\n  3: [\"hippogriff\", \"azkaban\", \"escape\", \"dog\", \"map\"],\n  4: [\"goblet\", \"tournament\", \"voldemort\", \"maze\", \"riddle\"],\n  5: [\"oclumency\", \"castle\", \"owl\", \"friends\", \"lake\"],\n  6: [\"squid\", \"quidditch\", \"snogging\", \"lessons\", \"liberation\"],\n  7: [\"love\", \"family\", \"battle\", \"died\", \"green\"],\n};\n\nexport { spells, characterLines, bookPages, topWords };\n","import React, { useState, useEffect } from \"react\";\nimport { Scrollama, Step } from \"react-scrollama\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport BarChart from \"./BarChart.jsx\";\nimport RadialChart from \"./RadialChart.jsx\";\nimport LineChartV2 from \"./LineChartV2.jsx\";\nimport _ from \"lodash\";\n\nimport { characterLines, bookPages } from \"./data/data.js\";\nimport spells from \"./data/spell_counts.json\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n`;\n\nconst AppWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst ScrollamaWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StepWrapper = styled.div`\n  margin: 50vh 0;\n  font-size: 50px;\n  // display: none;\n`;\n\nconst ChartWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nfunction App() {\n  const [book, setBook] = useState(null);\n\n  // Scroll to the top on render *smoooooothly*\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n  }, []);\n\n  const onStepEnter = ({ data }) => {\n    setBook(data);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppWrapper>\n        <ScrollamaWrapper>\n          <Scrollama onStepEnter={onStepEnter} offset={0.5}>\n            {[1, 2, 3, 4, 5, 6, 7].map((book) => (\n              <Step data={book} key={book}>\n                <StepWrapper>{book}</StepWrapper>\n              </Step>\n            ))}\n          </Scrollama>\n        </ScrollamaWrapper>\n        <div>\n          <RadialChart\n            data={spells[book]}\n            xAxis={\"spell\"}\n            yAxis={\"mentions\"}\n            title=\"Spell Use\"\n            stickTo=\"top\"\n          />\n        </div>\n      </AppWrapper>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}